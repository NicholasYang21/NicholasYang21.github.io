<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搜索算法学习（一）DFS</title>
      <link href="/2022/04/16/Search-Algs/"/>
      <url>/2022/04/16/Search-Algs/</url>
      
        <content type="html"><![CDATA[<h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><blockquote><p><strong>深度优先搜索算法</strong>（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。这个算法会尽可能深的搜索树的分支。当节点$v$的所在边都己被探寻过，搜索将回溯到发现节点$v$的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。这种算法不会根据图的结构等信息调整执行策略。</p><p>(摘自 <a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2">维基百科</a>)</p></blockquote><p>懂了，一句话来说就是：</p><p>从某个节点开始不断访问子节点直到访问不了后开始回溯，直到所有节点被访问。</p><p>这么说来DFS的时间开销会很大，又看了看，平均时间复杂度$O(b^m)$，果不其然。</p><p>$b$为每个节点下的子节点数，$m$为图的最大深度。</p><p>遍历顺序是这样的：</p><p><img src="/img/tree1.jpg"></p><p>也就是说从根节点开始一层一层获取子节点，这是——栈！</p><p><del>于是我又去看了一下</del> 维基百科使用了<code>std::stack</code></p><p>不过，递归调用也是建立在栈之上的。</p><p>所以我们用递归吧！(<del>就是不想用stack</del>)</p><p>不过DFS好像没有固定的板子，做几道题练练手？</p><h2 id="I-子集和问题-SDUT-OJ-1764"><a href="#I-子集和问题-SDUT-OJ-1764" class="headerlink" title="$(I)$ 子集和问题 (SDUT OJ 1764)"></a>$(I)$ 子集和问题 (SDUT OJ 1764)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>子集和问题的一个实例为$&lt;S,t&gt;$。其中，$S={ x_1,x_2,…,x_n}$是一个正整数的集合，$c$是一个正整数。子集和问题判定是否存在$S$的一个子集$S_1$，使得：</p><p>$\sum_{x \in S_1}{x} = c$</p><p>试设计一个解子集和问题的回溯法。<br>对于给定的正整数的集合$S={x_1,x_2,…,x_n}$和正整数$c$，计算$S$的一个子集$S_1$，使得：<br>$\sum_{x \in S_1}{x}=c$.</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入数据的第$1$行有$2$个正整数$n$和$c$$(n \leq 10^4,c \leq 10^7)$$n$，表示$S$的大小，$c$是子集和的目标值。接下来的$1$行中，有$n$个正整数，表示集合$S$中的元素。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>将子集和问题的解输出。当问题无解时，输出<code>No Solution!</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 10</span><br><span class="line">2 2 6 5 4</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 6</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>从<code>ans[0]</code>开始一个个的枚举，直到越界或找到解为止。</p><p>从对于每一次调用，都将当前<code>pos</code>枚举到<code>n</code>为止，用来记录符合条件的数组。</p><p>TLE代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">10000</span>], ans[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pos == n) <span class="keyword">return</span> sum == c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sum == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; n; i++) &#123;</span><br><span class="line">    ans[num] = S[i];</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum + S[i]))</span><br><span class="line">      num -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    std::cin &gt;&gt; S[i];</span><br><span class="line"></span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">      std::cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;No Solution!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以会TLE是因为有特殊情况——$S_1$为$S$本身或$S$的和根本不可能达到$c$。</p><p>当$S_1=S$时枚举的开销会很大，因此需要剪枝。</p><p>一、$S$的和根本不可能达到$c$。</p><p>二、$S$的和等于$c$。</p><p>三、DFS时和大于$c$。</p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">10000</span>], ans[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> sum_)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (pos == n) <span class="keyword">return</span> sum_ == c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sum_ == c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (sum_ &gt; c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; n; i++) &#123;</span><br><span class="line">    ans[num] = S[i];</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i + <span class="number">1</span>, sum_ + S[i]))</span><br><span class="line">      num -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    std::cin &gt;&gt; S[i], sum += S[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sum == c) &#123; num = n; <span class="keyword">goto</span> out; &#125;</span><br><span class="line">  <span class="keyword">if</span> (sum &lt; c) <span class="keyword">goto</span> ng;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">    out: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    std::cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ng: std::cout &lt;&lt; <span class="string">&quot;No Solution!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="II-走迷宫-Openjudge-2753"><a href="#II-走迷宫-Openjudge-2753" class="headerlink" title="$(II)$ 走迷宫 (Openjudge 2753)"></a>$(II)$ 走迷宫 (Openjudge 2753)</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>一个迷宫由$R$行$C$列格子组成，有的格子里有障碍物，不能走；有的格子是空地，可以走。<br>给定一个迷宫，求从左上角走到右下角最少需要走多少步(数据保证一定能走到)。只能在水平方向或垂直方向走，不能斜着走。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行是两个整数，$R$和$C$，代表迷宫的长和宽。$(1 \leq R, C \leq 40)$<br>接下来是$R$行，每行$C$个字符，代表整个迷宫。<br>空地格子用’.’表示，有障碍物的格子用’#’表示。<br>迷宫左上角和右下角都是’.’。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出从左上角走到右下角至少要经过多少步（即至少要经过多少个空地格子）。计算步数要包括起点和终点。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">..###</span><br><span class="line">#....</span><br><span class="line">#.#.#</span><br><span class="line">#.#.#</span><br><span class="line">#.#..</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h2><p>经典的DFS板题。</p><p>梳理一下思路：</p><ul><li><p>先使用一个被初始化得<strong>充分大</strong>的变量<code>ans</code>来记录最短路径，我初始化为了$1 \times 10^7$.</p></li><li><p>对于深度优先搜索函数<code>dfs</code>,提供三个参数：当前的$x, y$坐标及到当前坐标需要的步数$step$.</p><p>即$\operatorname{dfs}(x,y,step)$.</p></li><li><p>每一次状态转移，$x,y,step$分别更新为下一次到达的$&lt;x,y&gt;$坐标及$step + 1$（即转移到下一个可到达的点只需一步）</p></li><li><p>为防止回溯时回到最初始状态，所以<strong>将当前状态的点改为’#’以无法再向前回溯</strong>。递归后再还原。</p></li><li><p>递归边界：到达终点或无法再走（越界），需要注意的是，当到达终点时需要将<code>ans</code>设为$\min(ans, step)$以保证答案随时更新。</p></li></ul><p>OK，来看看核心代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == R - <span class="number">1</span> &amp;&amp; y == C - <span class="number">1</span>) &#123;</span><br><span class="line">ans = (step &lt; ans) ? step : ans;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; R &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; C &amp;&amp; map[nx][ny] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">map[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="built_in">dfs</span>(nx, ny, step + <span class="number">1</span>);</span><br><span class="line">map[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> R, C, ans = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> map[<span class="number">40</span>][<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == R - <span class="number">1</span> &amp;&amp; y == C - <span class="number">1</span>) &#123;</span><br><span class="line">ans = (step &lt; ans) ? step : ans;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &amp;&amp; nx &lt; R &amp;&amp; <span class="number">0</span> &lt;= ny &amp;&amp; ny &lt; C &amp;&amp; map[nx][ny] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">map[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="built_in">dfs</span>(nx, ny, step + <span class="number">1</span>);</span><br><span class="line">map[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cin &gt;&gt; R &gt;&gt; C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; ++j) &#123;</span><br><span class="line">std::cin &gt;&gt; map[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; ans &lt;&lt; std::flush;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然我还是没搞懂OIer们为什么要把数组设大到<code>MAX_N + 5</code>，没有空间浪费？</p><p>空间复杂度$O(R \times C)$，时间复杂度算不来。</p><p>子节点数$b$应该是$4$，因为有四个方向；参照《挑战程序设计竞赛》的话貌似是$O(4\times R \times C)$?</p><p>还好$R,C$不大，可以大一点下篇BFS<del>水一水</del>拿来当范例。</p><p>第三题我再找找。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1852 Ants 题解</title>
      <link href="/2022/04/16/POJ-1852-Ants/"/>
      <url>/2022/04/16/POJ-1852-Ants/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=1852">原题目（英语题面）</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一群蚂蚁在长度为$L\ cm$的水平杆上行走，每只蚂蚁以$1cm/s$的恒定速度行走。当一只蚂蚁到达杆子的一端时，它会立即从杆子上掉下来。当两只蚂蚁相遇时，它们会转身并反方向行走。我们知道蚂蚁在杆子上的原始位置，但我们不知道蚂蚁的初始朝向。你的任务是计算所有蚂蚁从杆子上掉下来的最短和最长时间。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行包含一个整数，表示测试数据的数量。</p><p>对于每一组数据：</p><p>第一行两个整数：棍子的长度$L$与蚂蚁数量$n$。</p><p>第二行：每只蚂蚁的原始位置$a_i$，使用空格分隔。</p><p>对于所有的数据，$L, n, a_i \leq 10^6$.</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每一组数据输出一行两个以空格分隔的整数表示所有蚂蚁掉落的最短与最长时间。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">10 3</span><br><span class="line">2 6 7</span><br><span class="line">214 7</span><br><span class="line">11 12 7 13 176 23 191</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 8</span><br><span class="line">38 207</span><br></pre></td></tr></table></figure><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="http://poj.org/searchproblem?field=source&key=Waterloo+local+2004.09.19">Waterloo local 2004.09.19</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>本题的难点在于考虑两只蚂蚁相遇的情况。</p><p><img src="/img/ants-1.png"></p><p>上图为蚂蚁$A$与$B$相遇时的情况.</p><p>因为蚂蚁的速度是一样的，因此可以不考虑蚂蚁的朝向，其到达边缘的时间仍不会改变。</p><p><img src="/img/ants-2.png"></p><p>上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, len, n, ants[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> min, max;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        min = max = <span class="number">0</span>; <span class="comment">// 每次都需要清除原来的最大最小值，否则会在比较时可能出现错误WA</span></span><br><span class="line"></span><br><span class="line">        std::cin &gt;&gt; len &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; ants[i];</span><br><span class="line">            <span class="comment">// 最小值</span></span><br><span class="line">            min = std::<span class="built_in">max</span>(min, std::<span class="built_in">min</span>(ants[i], len - ants[i]));</span><br><span class="line">            <span class="comment">// 最大值</span></span><br><span class="line">            max = std::<span class="built_in">max</span>(max, std::<span class="built_in">max</span>(ants[i], len - ants[i]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt; min &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; max &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(T \times n),$空间复杂度$O(n)$.</p><p>之前没有清除<code>min</code>和<code>max</code>硬是卡了半天hhh</p><p>本题<del>很贴心地</del>卡了输入时间，因此使用<code>cin</code>或<code>cout</code>进行$I/O$时请解除与<code>cstdio</code>的同步.</p><p>因为$POJ$貌似无$C++11$所以本来是用的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)</span><br></pre></td></tr></table></figure><p>发现$CE$后很无语…</p><p>加油！</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> 题解 </tag>
            
            <tag> POJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统学习笔记（二）跳出MBR限制区域（前半段）</title>
      <link href="/2022/02/01/MBR-Jumpout-1/"/>
      <url>/2022/02/01/MBR-Jumpout-1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此笔记不为UEFI，且是为了探究底层而写。</p><h1 id="什么是CS-IP"><a href="#什么是CS-IP" class="headerlink" title="什么是CS:IP"></a>什么是CS:IP</h1><p><strong>CS: Code Segment register 代码段寄存器</strong></p><p><strong>IP: Instruction Pointer register 指令指针寄存器</strong></p><p>在x86 CPU中，地址加法器通过这两个寄存器的值获得指令的地址。</p><p>$CS \times 10H + IP = $指令地址</p><p>因为MBR只有$512Bytes$，所以需要跳出这片空间。</p><p>在x86中：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jmp</span> <span class="built_in">CS</span>:<span class="built_in">IP</span> <span class="comment">; 跳转至指定的CS:IP地址</span></span><br></pre></td></tr></table></figure><blockquote><p>mov可以改变CS寄存器，但不可以改变IP寄存器。</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">mbrsgmt <span class="built_in">equ</span> <span class="number">7c0h</span> <span class="comment">; 加载源地址</span></span><br><span class="line">outsgmt <span class="built_in">equ</span> <span class="number">800h</span> <span class="comment">; 跳出MBR后的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jmp</span> start</span><br><span class="line"><span class="symbol">msg1:</span> <span class="built_in">db</span> <span class="string">&#x27;======== ST(Shit) OS ========&#x27;</span>, <span class="string">&#x27;$&#x27;</span></span><br><span class="line"><span class="symbol">msg2:</span> <span class="built_in">db</span> <span class="string">&#x27;Now in the MBR.&#x27;</span>, <span class="string">&#x27;$&#x27;</span></span><br><span class="line"><span class="symbol">msg3:</span> <span class="built_in">db</span> <span class="string">&#x27;Now jump out from the MBR.&#x27;</span>, <span class="string">&#x27;$&#x27;</span></span><br><span class="line"><span class="symbol">msg4:</span> <span class="built_in">db</span> <span class="string">&#x27;    CS: ????H&#x27;</span>, <span class="string">&#x27;$&#x27;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">addrmsg:</span> <span class="built_in">db</span> <span class="string">&#x27;The address of CS registry:&#x27;</span>, <span class="string">&#x27;$&#x27;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>, mbrsgmt</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span></span><br><span class="line">    <span class="keyword">call</span> welcome</span><br><span class="line">    <span class="keyword">call</span> inmbr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">jmp</span> outsgmt: <span class="number">0h</span> <span class="comment">; 跳出MBR</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">call</span> outmbr</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">print:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">si</span>]</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="string">&#x27;$&#x27;</span></span><br><span class="line">    <span class="keyword">je</span> displayend</span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">0eh</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">10h</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">    <span class="keyword">call</span> print</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">displayend:</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">welcome:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>, msg1</span><br><span class="line">    <span class="keyword">call</span> print</span><br><span class="line">    <span class="built_in">times</span> <span class="number">2</span> <span class="keyword">call</span> endl</span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">inmbr:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>, msg2</span><br><span class="line">    <span class="keyword">call</span> print</span><br><span class="line">    <span class="built_in">times</span> <span class="number">2</span> <span class="keyword">call</span> endl</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>, addrmsg</span><br><span class="line">    <span class="keyword">call</span> print</span><br><span class="line">    <span class="keyword">call</span> endl</span><br><span class="line">    <span class="keyword">call</span> printcsaddr</span><br><span class="line">    <span class="built_in">times</span> <span class="number">2</span> <span class="keyword">call</span> endl</span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">outmbr:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>, msg2</span><br><span class="line">    <span class="keyword">call</span> print</span><br><span class="line">    <span class="built_in">times</span> <span class="number">2</span> <span class="keyword">call</span> endl</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>, addrmsg</span><br><span class="line">    <span class="keyword">call</span> print</span><br><span class="line">    <span class="keyword">call</span> endl</span><br><span class="line">    <span class="keyword">call</span> printcsaddr</span><br><span class="line">    <span class="built_in">times</span> <span class="number">2</span> <span class="keyword">call</span> endl</span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">printcsaddr:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="built_in">cs</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">ah</span> <span class="comment">; 转换字符串</span></span><br><span class="line">    <span class="keyword">call</span> get_high_and_low4bits</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">bh</span> <span class="comment">; 获得四个高位bit</span></span><br><span class="line">    <span class="keyword">call</span> ASCII <span class="comment">; 处理一下</span></span><br><span class="line">    <span class="keyword">mov</span> [msg4 + <span class="number">8</span>], <span class="built_in">dl</span> <span class="comment">; 转换成字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="built_in">bl</span> <span class="comment">; 四个低位bit</span></span><br><span class="line">    <span class="keyword">call</span> ASCII <span class="comment">; 处理</span></span><br><span class="line">    <span class="keyword">mov</span> [msg4 + <span class="number">9</span>], <span class="built_in">dl</span> <span class="comment">; 转成字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="built_in">al</span> <span class="comment">; 同理</span></span><br><span class="line">    <span class="keyword">call</span> get_high_and_low4bits</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="number">bh</span></span><br><span class="line">    <span class="keyword">call</span> ASCII</span><br><span class="line">    <span class="keyword">mov</span> [msg4 + <span class="number">10</span>], <span class="built_in">dl</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>, <span class="built_in">bl</span></span><br><span class="line">    <span class="keyword">call</span> ASCII</span><br><span class="line">    <span class="keyword">mov</span> [msg4 + <span class="number">11</span>], <span class="built_in">dl</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">si</span>, msg4</span><br><span class="line">    <span class="keyword">call</span> print <span class="comment">; 输出</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">endl:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">0eh</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">0dh</span> <span class="comment">; CR</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">10h</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">al</span>, <span class="number">0ah</span> <span class="comment">; LF</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">10h</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">ASCII:</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">dl</span>, <span class="number">9</span></span><br><span class="line">    <span class="keyword">jg</span> letter</span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">dl</span>, <span class="number">30h</span> <span class="comment">; 30h = 48 = &#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">letter:</span></span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">dl</span>, <span class="number">37h</span> <span class="comment">; &#x27;A&#x27; - 10 = 55 = 37h</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 取出一个字节的高低四位。</span></span><br><span class="line"><span class="symbol">get_high_and_low4bits:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">dh</span>, <span class="built_in">dl</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">bl</span>, <span class="built_in">dl</span></span><br><span class="line">    <span class="keyword">shr</span> <span class="number">dh</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">bh</span>, <span class="number">dh</span> <span class="comment">; high 4 bits</span></span><br><span class="line">    <span class="keyword">and</span> <span class="built_in">bl</span>, <span class="number">0fh</span> <span class="comment">; low 4 bits (0x0f = 0b00001111)</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">times</span> <span class="number">510</span> - ($ - $$) <span class="built_in">db</span> <span class="number">0</span></span><br><span class="line"><span class="built_in">db</span> <span class="number">0x55</span>, <span class="number">0xaa</span></span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>先生成镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm MBR-CS-IP.asm -o MBR.img</span><br></pre></td></tr></table></figure><p>装载一下，上虚拟机：</p><p><img src="/img/mbr-cs-ip-vm.png"></p><blockquote><p>这并不是翻车。 <del>也可以说是</del></p><p>因为跳转到了地址800h: 0, 因此使得前面地址的指令无法使用。</p><p>下一篇笔记将会详述。</p></blockquote><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>1.CS:IP的跳转。</p><p>2.(题外)取出一个字节的高低四位的小算法。</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> 自制操作系统 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统学习笔记（一）引导扇区</title>
      <link href="/2022/01/30/MBR-Studing/"/>
      <url>/2022/01/30/MBR-Studing/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此笔记不为UEFI，且是为了探究底层而写。</p><h1 id="主引导记录-Master-Boot-Record"><a href="#主引导记录-Master-Boot-Record" class="headerlink" title="主引导记录 (Master Boot Record)"></a>主引导记录 (Master Boot Record)</h1><p>计算机在启动时，会读取一个扇区共$512Bytes$的数据，当这个扇区的结尾为0x55, 0xAA时，就表明这个设备是用户想要用于启动计算机的设备。这$512Bytes$被称为<strong>“主引导记录(Master Boot Record)”</strong>.接下来，它会被读取到内存地址<strong>0x7C00</strong>，并从这个地址开始运行程序。</p><h1 id="MBR标准格式"><a href="#MBR标准格式" class="headerlink" title="MBR标准格式"></a>MBR标准格式</h1><p><img src="https://pic3.zhimg.com/80/v2-b19a5ed36aeec1ce5fe08a65e546fdce_720w.jpg"></p><h1 id="使用NASM制作MBR"><a href="#使用NASM制作MBR" class="headerlink" title="使用NASM制作MBR"></a>使用NASM制作MBR</h1><p>注：此处镜像为1.44MB标准软盘容量。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mbrsgmt <span class="built_in">equ</span> <span class="number">7c0h</span> <span class="comment">; 加载源地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">jmp</span> start</span><br><span class="line"><span class="symbol">msg:</span> <span class="built_in">db</span> <span class="string">&#x27;hello,world&#x27;</span>, <span class="string">&#x27;$&#x27;</span> <span class="comment">; 输出的字符串</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">start:</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ax</span>, mbrsgmt <span class="comment">; ax设置为源地址</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ds</span>, <span class="built_in">ax</span> <span class="comment">; 存入数据段</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">si</span>, msg <span class="comment">; 放入流</span></span><br><span class="line"><span class="keyword">call</span> print <span class="comment">; 打印</span></span><br><span class="line"><span class="keyword">jmp</span> $ <span class="comment">; 死循环</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">print:</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">al</span>, [<span class="built_in">si</span>] <span class="comment">; 把流中的一个字节放进al</span></span><br><span class="line"><span class="keyword">cmp</span> <span class="built_in">al</span>, <span class="string">&#x27;$&#x27;</span> <span class="comment">; 判断字符串是否结束</span></span><br><span class="line"><span class="keyword">je</span> displayend <span class="comment">; 如果碰到结束标志就ret</span></span><br><span class="line"><span class="keyword">mov</span> <span class="number">ah</span>, <span class="number">0eh</span> <span class="comment">; 选用 10H BIOS中断的子服务：使用tty模式写字符</span></span><br><span class="line"><span class="keyword">int</span> <span class="number">10h</span> <span class="comment">; 写al中的字符</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">si</span> <span class="comment">; 去到下一个字符</span></span><br><span class="line"><span class="keyword">jmp</span> print <span class="comment">; 递归</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">displayend:</span></span><br><span class="line"><span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">times</span> <span class="number">510</span> - ($ - $$) <span class="built_in">db</span> <span class="number">0</span> <span class="comment">; 填充结尾二字节前的所有字节</span></span><br><span class="line"><span class="built_in">db</span> <span class="number">0x55</span>, <span class="number">0xaa</span> <span class="comment">; 填充引导flag</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">times</span> <span class="number">1474560</span> - ($ - $$) <span class="built_in">db</span> <span class="number">0</span> <span class="comment">; 将1.44MB都填充空字节</span></span><br></pre></td></tr></table></figure><blockquote><h1 id="旁注：INT-10H-中断"><a href="#旁注：INT-10H-中断" class="headerlink" title="旁注：INT 10H 中断"></a>旁注：INT 10H 中断</h1><p>显示服务 - 由BIOS或操作系统设定以供软件调用。</p><table><thead><tr><th align="center">AH=00h</th><th align="center">设定显示模式</th></tr></thead><tbody><tr><td align="center">AH=01h</td><td align="center">设定游标形态</td></tr><tr><td align="center">AH=02h</td><td align="center">设置光标位置</td></tr><tr><td align="center">AH=03h</td><td align="center">获取光标位置与形态</td></tr><tr><td align="center">AH=04h</td><td align="center">获取光标位置</td></tr><tr><td align="center">AH=05h</td><td align="center">设置显示页</td></tr><tr><td align="center">AH=06h</td><td align="center">清除或滚动栏画面(上)</td></tr><tr><td align="center">AH=07h</td><td align="center">清除或滚动栏画面(下)</td></tr><tr><td align="center">AH=08h</td><td align="center">读取游标处字符与属性</td></tr><tr><td align="center">AH=09h</td><td align="center">更改游标处字符与属性</td></tr><tr><td align="center">AH=0Ah</td><td align="center">更改游标处字符</td></tr><tr><td align="center">AH=0Bh</td><td align="center">设定边界颜色</td></tr><tr><td align="center">AH=0Eh</td><td align="center">在TTY模式下写字符</td></tr><tr><td align="center">AH=0Fh</td><td align="center">获取目前显示模式</td></tr><tr><td align="center">AH=13h</td><td align="center">写字符串</td></tr></tbody></table><p>(摘自 <a href="https://zh.wikipedia.org/wiki/BIOS%E4%B8%AD%E6%96%B7%E5%91%BC%E5%8F%AB">维基百科</a>)</p></blockquote><p>使用NASM生成镜像文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm MBRtest.asm -o MBR.img</span><br></pre></td></tr></table></figure><p>将镜像装载到虚拟机的控制器，并启动虚拟机。</p><p>虚拟机运行结果：</p><p><img src="https://i.imgur.com/3fcGd1w.png"></p><p>运行环境：<strong>x86_64 Windows 10, Oracle VM VirtualBox</strong></p><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>1.系统自<strong>0x7C00</strong>处开始引导。</p><p>2.引导扇区结尾两字节必须为<strong>0x55, 0xAA</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> 自制操作系统 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迟来的——2021年度总结</title>
      <link href="/2022/01/30/%E8%BF%9F%E6%9D%A5%E7%9A%84%E2%80%94%E2%80%942021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/30/%E8%BF%9F%E6%9D%A5%E7%9A%84%E2%80%94%E2%80%942021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="CSP-J-爆炸"><a href="#CSP-J-爆炸" class="headerlink" title="CSP-J 爆炸"></a>CSP-J 爆炸</h1><p>不废话了。</p><p>今年第一次参加OI，果然项目狗还是打不过OIer.</p><p>CSP-J初赛$52.5 pts$,刚好过重庆线，复赛$90 pts$，人原地爆炸。</p><p>三等妥妥的，cqbz yb校区唯一一个拿了等级的可还行。</p><p>$T1: 90pts$</p><p>$T2: 0pts$</p><p>$T3: 0pts$</p><p>$T4: 0pts$</p><p>原本绝对的把握100+，结果<del>CCF</del>€€￡的环境导致$T3$直接死，$T1$缺$10pts$.</p><p>调试时：$T3 TLE$, 但绝对不是$0pts$.</p><h1 id="立项全咕"><a href="#立项全咕" class="headerlink" title="立项全咕"></a>立项全咕</h1><p>我承认我咕了。</p><p>1.HackBit <del>咕咕两年祭</del></p><p>2.FireLang <del>咕咕半年祭</del></p><h1 id="Reports"><a href="#Reports" class="headerlink" title="Reports"></a>Reports</h1><p>1.Discord, GMail注册成功。</p><p>2.项目：</p><h3 id="1-基于CLI的RPG-HackBit。"><a href="#1-基于CLI的RPG-HackBit。" class="headerlink" title="1.基于CLI的RPG HackBit。"></a>1.基于CLI的RPG HackBit。</h3><h3 id="2-个人博客重造（已完成，不然你看不到这篇文章）。"><a href="#2-个人博客重造（已完成，不然你看不到这篇文章）。" class="headerlink" title="2.个人博客重造（已完成，不然你看不到这篇文章）。"></a>2.个人博客重造（已完成，不然你看不到这篇文章）。</h3><h3 id="3-基于Python-flask框架的在线评测系统RelexOJ。"><a href="#3-基于Python-flask框架的在线评测系统RelexOJ。" class="headerlink" title="3.基于Python flask框架的在线评测系统RelexOJ。"></a>3.基于Python flask框架的在线评测系统RelexOJ。</h3><h3 id="4-基于OpenGL的3D动画游戏引擎RelexEngine。"><a href="#4-基于OpenGL的3D动画游戏引擎RelexEngine。" class="headerlink" title="4.基于OpenGL的3D动画游戏引擎RelexEngine。"></a>4.基于OpenGL的3D动画游戏引擎RelexEngine。</h3><p>感谢。</p><p>新的一年拜托了。</p><p>最后</p><h1 id="新年快乐。"><a href="#新年快乐。" class="headerlink" title="新年快乐。"></a>新年快乐。</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
